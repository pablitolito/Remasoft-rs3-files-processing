#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 13 18:51:15 2020

@author: pablitolito

Python script to create a frequency histogram of ChRM intensity and unblocking temperatures.

It searches the folder for files generated by A1.get_NRM-Components_fromRemasoft_v2024.py,
named Summary_Components_DIRECTORY.txt, which are comma-delimited tables.

You can adjust the lower and upper limits of the x-axis for the histogram,
as well as the number of bins. To do this, modify the variables `lim_inf_x`, `lim_sup_x`, and `bins`.
By default, these are set to the minimum and maximum ChRM values and 50 bins for intensity.
"""

import numpy as np
import matplotlib.pyplot as plt
from os import listdir


# Function to generate the relative cumulative frequency curve
def ecdf(sample):

    # convert sample to a numpy array, if it isn't already
    sample = np.atleast_1d(sample)

    # find the unique values and their corresponding counts
    quantiles, counts = np.unique(sample, return_counts=True)

    # take the cumulative sum of the counts and divide by the sample size to
    # get the cumulative probabilities between 0 and 1
    cumprob = np.cumsum(counts).astype(np.double) / sample.size

    return quantiles, cumprob

def plots(file_name):
    print(f'\n{file_name} file')
    chrm, tmin, tmax = [], [], []

    # Read the file and extract data
    data = np.genfromtxt(file_name, dtype='str', delimiter=',', skip_header=1, 
                         usecols=(0, 7, 15, 16))
    
    # Process data to create lists for ChRM values (in mA/m) and unblocking Temps.    
    for dato in data:
        chrm.append(float(dato[1]) * 1000)  # Convert ChRM to mA/m
        try: 
            tmin.append(float(dato[2][:-1]))  # Remove trailing character if present
        except ValueError:
            print(f'Error with {dato[0]} temp_min value')
        try:
            tmax.append(float(dato[3][:-1]))  # Remove trailing character if present
        except ValueError:
            print(f'Error with {dato[0]} temp_max value')
            
    # Print temperature ranges
    print(f'\nTemp_Min: {min(tmin)}')
    print(f'Temp_Max: {max(tmax)}')
    
    # Setting temperature x-axis limits and bins at every 25 ºC
    xlim_min_T = min(tmin) - (25 - min(tmin) % 25)
    xlim_max_T = max(tmax) + (50 - max(tmax) % 25)
    bins_T = int((xlim_max_T - xlim_min_T) / 25)
    
    # Change x-axis limits and bins here for ChRM intensity
    lim_inf_x = min(chrm)
    lim_sup_x = max(chrm)
    bins = 50
    
    fig, (ax1, ax3) = plt.subplots(nrows=1, ncols=2, figsize=(18, 6))
    fig.subplots_adjust(wspace=0.3)  # Increase space between plots
    ax2 = ax1.twinx()  # Create a twin y-axis for ax1
    
    # Set x-axis limits for ChRM intensity and temperature plots
    ax1.set_xlim(lim_inf_x, lim_sup_x)
    ax2.set_xlim(lim_inf_x, lim_sup_x)
    ax3.set_xlim(xlim_min_T, xlim_max_T)
    
    # Apply the 'ecdf' function and obtain cumulative curve values
    qe, pe = ecdf(chrm)
    
    # Calculate min, max, and quartiles (25%, 50%, and 75%) for ChRM
    min_chrm = min(chrm)
    max_chrm = max(chrm)
    print('min_ChRM:', min_chrm)
    print('max_ChRM:', max_chrm)
    q1 = np.percentile(chrm, 25)
    q2 = np.percentile(chrm, 50)
    q3 = np.percentile(chrm, 75)
    print('quartile 1:', q1)
    print('quartile 2:', q2)
    print('quartile 3:', q3)
    
    # Draw the histogram for ChRM intensity
    ax1.hist(chrm, bins=10**np.linspace(np.log10(lim_inf_x), np.log10(lim_sup_x), bins))
    ax1.set_xscale("log")
    ax1.set_ylabel('Frequency', color='blue', fontsize=12)
    ax1.tick_params('y', colors='blue', labelsize=12)
    ax1.set_xlabel('$\mathrm{ChRM \ Intensity} \ (mA/m)$', fontsize=12)
    
    # Draw the cumulative curve for ChRM intensity
    ax2.plot(qe, pe, '-r')
    ax2.set_ylabel('Cumulative Frequency', color='r', fontsize=12)
    ax2.tick_params('y', colors='r', labelsize=12)
    ax2.set_xscale("log")
    # Add vertical lines for the quartiles
    for q, label in zip([q1, q2, q3], ['25%', '50%', '75%']):
        ax2.axvline(x=q, ymax=0.92, color='k', ls='--')
        ax2.text(q, 0.98, label, ha='center')
        
    ax1.set_title(f'ChRM Intensity Histogram  (n = {len(chrm)})', fontsize=14)
    
    # Draw the histogram for unblocking temperature (tmin and tmax)
    ax3.hist(tmin, bins=bins_T, range=(xlim_min_T, xlim_max_T), color='tab:blue', alpha=0.5, label='Min')
    ax3.hist(tmax, bins=bins_T, range=(xlim_min_T, xlim_max_T), color='tab:red', alpha=0.5, label='Max')
    ax3.set_ylabel('Frequency', fontsize=12)
    ax3.tick_params(labelsize=12)
    ax3.set_xlabel('Temperature (ºC)', fontsize=12)
    ax3.legend(fontsize=12)
    ax3.set_title(f'Unblocking Temperature  (n = {len(tmax)})', fontsize=14)
    
    # Save the plot as PDF and PNG
    plt.savefig(f'Hist_{file_name[:-4]}.pdf', bbox_inches='tight')
    plt.savefig(f'Hist_{file_name[:-4]}.png', bbox_inches='tight')
    plt.show()
        
        
# Process all files with the specified prefix and suffix in the current directory
chrm_names = [f for f in listdir(".") if f.startswith('Summary_Components') and f.endswith('.txt')]
print(f'ChRM files: {chrm_names}')
for file in chrm_names:
    plots(file)